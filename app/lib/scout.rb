# frozen_string_literal: true

# Property Inspection links are generated by integrating with a third party api
class Scout
  # Generates a scout url by calling remote api
  def self.generate(project)
    auth_ = "username|#{INSPECTION_SERVICE_PASSWORD}|2/15/2016 10:00:00 PM|#{INSPECTION_SERVICE_REF_NO}|00000"
    auth = encrypt_aes(auth_)

    uri = URI.parse(INSPECTION_SERVICE_URL)
    req = Net::HTTP.new(uri.hostname, uri.port)
    req.use_ssl = true
    Rails.logger.info ">> #{INSPECTION_SERVICE_URL} D3BUG"
    res = req.post(
      uri.path,
      {
        auth: auth,
        clientid: INSPECTION_SERVICE_CLIENT_ID,
        reportaction: 'create',
        address: project.street,
        zip: project.zip,
        producttype: 'Scout',
        productid: 'PDAv1',
        userid: INSPECTION_SERVICE_USER_ID
      }.to_json,
      {
        'Content-Type' => 'application/json',
        "Accept" => "application/json" })
    Rails.logger.info "<< #{res.inspect} D3BUG"
    return 'https://example.com/testing'
  end


  def self.encrypt_aes(plaintext)
    secret = "#{INSPECTION_SERVICE_KEY}#{INSPECTION_SERVICE_USER_ID}"
    salt = INSPECTION_SERVICE_CLIENT_ID
    key = OpenSSL::KDF.pbkdf2_hmac(secret, salt: salt, iterations: 1000, length: 32, hash: "sha1")
    # from https://stackoverflow.com/a/68088758
    cipher = OpenSSL::Cipher.new('AES-256-CBC')
    cipher.encrypt
    cipher.key = key
    nonce = cipher.random_iv
    cipher.iv = nonce
    ciphertext = cipher.update(plaintext) + cipher.final
    sizeIvCiphertext = ['10000000'].pack('H*').concat(nonce.concat(ciphertext))
    return Base64.encode64(sizeIvCiphertext)
    # /from https://stackoverflow.com/a/68088758
  end
end
